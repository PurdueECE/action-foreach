Question 3:

    Injection 1: username = 10 or 1=1, password = 10 or 1=1
                 sql command = SELECT * FROM users where username = 10 or 1=1 and password = 10 or 1=1

                 This will return the entire list of user data since 1=1 is always true.

    Injection 2: username = "" or ""="", password  = "" or ""=""
                 sql command  = SELECT * FROM users where username = "" or ""="" and password = "" or ""=""

                 This will return the entire list of user data since ""="" is always true

    Injection 3: username = "will1", password = 1234567; drop table users
                 SELECT * FROM users where username = "will1" and password = 1234567; drop table users

                 This will delete the users table, but only if the executescript command is used. Otherwise it will cause an error

    Injection 4: username = "will1"--", password = anything
                 sql command = SELECT * FROM users where username = "will1"--" and password = anything
                 
                 This allows you to login as any user without knowing their password. The "--" acts as a comment so the password
                 check in the sql command is ignored.

    Injection 5: username = "will1", password = 1234567; delete from users where username = "will1"
                 sql command = SELECT * FROM users where username = "will1" and password = 1234567; delete from users where username = "will1"
                 
                 This allows you to delete any user from the user table, but only if the executescript command is used. Otherwise it will cause an error

Question 4:

A good way to protect against the injections mentioned above is
to use SQL parameters. SQL parameters are added to an SQL query
at execution time, and SQL checks each parameter to ensure that
it is correct for its column and are treated literally. This 
means that a user cannot enter SQL code that would be executed 
and result in malicious actions. There are other methods of 
sanitization but this is the one that would be the most applicable
since the above examples rely on being able to insert SQL code 
into the execution statement.