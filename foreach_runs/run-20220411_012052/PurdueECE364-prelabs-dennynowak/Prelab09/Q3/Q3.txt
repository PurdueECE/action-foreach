One major method for protecting against SQL injection attacks are SQL parameters. 
For all my examples, I did not use SQL parameters which made my functions vulernable. For instance,
my examples 2 and 4 executed a simple combined SQL string. This allowed the attacker to include a conditional
statement like " or ""=" or a union statement. For examples 1, 3, and 5, I used the .format() function
for the print statement, which allowed the attacker to insert another SQL statement. To prevent this attack, 
I would use SQL parameters for values like the statement: values (?, ?) instead of python strings.

The next method for protecting against SQL injection attacks is the connection.cursor.execute() function
from sqlite3. In examples 1, 3, and 5, the attacker was able to input a secondary SQL statement into the 
function, such as "drop table users;". This was allowed because of the .executescript() function. To 
prevent this attack, I would replace .executescript() function with the .execute() function to only
allow a single SQL statement.

Another method for protecting against SQL injection attacks is using hard to crack table names that prevent
the attacker from accessing the table. For example, an ordinary table name of 'users' in my examples 
is easier to guess and access than a hash named table. 